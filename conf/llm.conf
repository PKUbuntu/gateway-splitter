# 配置和 llm 相关的内容：
# 1. ollama 的多 upstream -> 6060
# 2. 使用 lua-resty-upstream-healthcheck 来检测可用性

upstream ollama {
  server 192.168.70.185:11434;
  server 192.168.1.14:11434;
  server 127.0.0.1:11434 backup;
  # server 127.0.0.1:8080 backup;
}

lua_shared_dict healthcheck 1m;

lua_socket_log_errors off;

init_worker_by_lua_block {
    local hc = require "resty.upstream.healthcheck"

    local ok, err = hc.spawn_checker{
        shm = "healthcheck",  -- defined by "lua_shared_dict"
        upstream = "ollama", -- defined by "upstream"
        type = "http", -- support "http" and "https"

        http_req = "GET / HTTP/1.0\r\nHost: -\r\n\r\n", -- raw HTTP request for checking

        port = nil,  -- the check port, it can be different than the original backend server port, default means the same as the original backend server
        interval = 5000,  -- run the check cycle every 5 sec
        timeout = 1000,   -- 1 sec is the timeout for network operations
        fall = 3,  -- # of successive failures before turning a peer down
        rise = 2,  -- # of successive successes before turning a peer up
        valid_statuses = {200, 302, 403, 404},  -- a list valid HTTP status code
        concurrency = 10,  -- concurrency level for test requests
        -- ssl_verify = true, -- https type only, verify ssl certificate or not, default true
        -- host = ollama, -- https type only, host name in ssl handshake, default nil
    }
    if not ok then
        ngx.log(ngx.ERR, "failed to spawn health checker: ", err)
        return
    end

    -- Just call hc.spawn_checker() for more times here if you have
    -- more upstream groups to monitor. One call for one upstream group.
    -- They can all share the same shm zone without conflicts but they
    -- need a bigger shm zone for obvious reasons.
}


server {
  listen [::]:6060;
  listen 6060;
  
  # The host name to respond to
  server_name _;

  client_header_timeout 180s;
  client_body_timeout 180s;

  location / {
        proxy_pass http://ollama;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

	proxy_http_version 1.1;
	proxy_set_header Connection 'keep-alive';
	proxy_set_header Cache-Control 'no-cache';
	proxy_set_header Content-Type 'text/event-stream';
  }

  location = /status {
            access_log off;
            # allow 127.0.0.1;
            # deny all;

            default_type text/plain;
            content_by_lua_block {
                local hc = require "resty.upstream.healthcheck"
                ngx.say("Nginx Worker PID: ", ngx.worker.pid())
                ngx.print(hc.status_page())
            }
  }
}